#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Hash Table structure
struct HashTable {
    int table[TABLE_SIZE];
};

// Function to initialize the hash table
void initHashTable(struct HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->table[i] = -1;  // -1 means the slot is empty
    }
}

// Hash function
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key into the hash table (linear probing method)
void insertLinearProbing(struct HashTable* ht, int key) {
    int index = hash(key);
    
    // Find the next available slot using linear probing
    while (ht->table[index] != -1) {
        index = (index + 1) % TABLE_SIZE;
    }
    
    ht->table[index] = key;
}

// Function to search for a key in the hash table (linear probing method)
int searchLinearProbing(struct HashTable* ht, int key) {
    int index = hash(key);
    int startIndex = index;

    // Search for the key using linear probing
    while (ht->table[index] != -1) {
        if (ht->table[index] == key)
            return 1;  // Found
        index = (index + 1) % TABLE_SIZE;
        if (index == startIndex) break;  // Stop if we have checked all slots
    }
    return 0;  // Not found
}

// Function to display the hash table (linear probing method)
void displayLinearProbing(struct HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (ht->table[i] == -1)
            printf("Index %d: EMPTY\n", i);
        else
            printf("Index %d: %d\n", i, ht->table[i]);
    }
}

int main() {
    struct HashTable ht;
    initHashTable(&ht);

    insertLinearProbing(&ht, 10);
    insertLinearProbing(&ht, 20);
    insertLinearProbing(&ht, 30);
    insertLinearProbing(&ht, 25);
    insertLinearProbing(&ht, 35);

    displayLinearProbing(&ht);

    printf("Search for 25: %s\n", searchLinearProbing(&ht, 25) ? "Found" : "Not Found");
    printf("Search for 50: %s\n", searchLinearProbing(&ht, 50) ? "Found" : "Not Found");

    return 0;
}
