#include <stdio.h>
#include <stdlib.h>

// Define the structure for a queue node
struct Node {
    int data;
    struct Node* next;
};

// Define the structure for the queue
struct Queue {
    struct Node* front;
    struct Node* rear;
};

// Function to initialize the queue
void initialize(struct Queue* queue) {
    queue->front = queue->rear = NULL;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}

// Function to enqueue (add) an element to the queue
void enqueue(struct Queue* queue, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    // If the queue is empty, the new node becomes both the front and rear
    if (isEmpty(queue)) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode; // Link the new node to the end of the queue
        queue->rear = newNode;       // Move the rear pointer to the new node
    }
    printf("Enqueued %d\n", data);
}

// Function to dequeue (remove) an element from the queue
void dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return;
    }

    struct Node* temp = queue->front; // Store the front node temporarily
    queue->front = queue->front->next; // Move the front pointer to the next node

    // If the queue becomes empty after dequeue, set the rear to NULL as well
    if (queue->front == NULL) {
        queue->rear = NULL;
    }

    printf("Dequeued %d\n", temp->data);
    free(temp); // Free the memory of the dequeued node
}

// Function to display the elements in the queue
void displayQueue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    struct Node* temp = queue->front;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Queue queue;
    initialize(&queue); // Initialize the empty queue

    // Enqueue elements
    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);

    // Display the queue
    displayQueue(&queue);

    // Dequeue elements
    dequeue(&queue);
    dequeue(&queue);

    // Display the queue after dequeuing
    displayQueue(&queue);

    // Enqueue more elements
    enqueue(&queue, 40);
    enqueue(&queue, 50);

    // Display the queue after more enqueues
    displayQueue(&queue);

    // Dequeue all elements
    dequeue(&queue);
    dequeue(&queue);
    dequeue(&queue);

    // Display the final empty queue
    displayQueue(&queue);

    return 0;
}
